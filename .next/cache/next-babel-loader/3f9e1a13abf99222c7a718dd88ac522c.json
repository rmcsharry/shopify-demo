{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      discount: '',\n      price: '',\n      variantId: '',\n      showToast: false\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {\n      const item = store.get('item');\n      const price = item.variants.edges[0].node.price;\n      const variantId = item.variants.edges[0].node.id;\n      const discounter = price * 0.1;\n      this.setState({\n        price,\n        variantId\n      });\n      return (price - discounter).toFixed(2);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n    return __jsx(Mutation, {\n      mutation: UPDATE_PRICE\n    }, (handleSubmit, {\n      error,\n      data\n    }) => {\n      const showError = error && __jsx(Banner, {\n        status: \"critical\"\n      }, error.message);\n\n      const showToast = data && data.productVariantUpdate && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: () => this.setState({\n          showToast: false\n        })\n      });\n\n      return __jsx(Page, null, __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(DisplayText, {\n        size: \"large\"\n      }, name), __jsx(Form, null, __jsx(Card, {\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        prefix: \"$\",\n        value: price,\n        disabled: true,\n        label: \"Original price\",\n        type: \"price\"\n      }), __jsx(TextField, {\n        prefix: \"$\",\n        value: discount,\n        onChange: this.handleChange('discount'),\n        label: \"Discounted price\",\n        type: \"discount\"\n      })), __jsx(\"p\", null, \"This sale price will expire in two weeks\"))), __jsx(PageActions, {\n        primaryAction: [{\n          content: 'Save',\n          onAction: () => {\n            const productVariableInput = {\n              id: variantId,\n              price: discount\n            };\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }],\n        secondaryActions: [{\n          content: 'Remove discount'\n        }]\n      })))));\n    });\n  }\n\n}\n\nexport default EditProduct;\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/richardmcsharry/code/shopify-demo/pages/edit-product.js"],"names":["Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","EditProduct","React","Component","discount","price","variantId","showToast","field","value","setState","item","get","variants","edges","node","id","discounter","toFixed","componentDidMount","itemToBeConsumed","render","name","state","UPDATE_PRICE","handleSubmit","error","data","showError","message","productVariantUpdate","handleChange","content","onAction","productVariableInput","variables","input"],"mappings":"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","sourcesContent":["import {\n  Banner,\n  Card,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Toast\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n  state = {\n    discount: '',\n    price: '',\n    variantId: '',\n    showToast: false\n  };\n\n  componentDidMount() {\n    this.setState({ discount: this.itemToBeConsumed() });\n  }\n\n  render() {\n    const { name, price, discount, variantId } = this.state;\n    return (\n      <Mutation mutation={UPDATE_PRICE}>\n        {(handleSubmit, { error, data }) => {\n          const showError = error && (\n            <Banner status='critical'>{error.message}</Banner>\n          );\n          const showToast = data && data.productVariantUpdate && (\n            <Toast\n              content='Sucessfully updated'\n              onDismiss={() => this.setState({ showToast: false })}\n            />\n          );\n          return (\n            <Page>\n              <Layout>\n                <Layout.Section>\n                  <DisplayText size='large'>{name}</DisplayText>\n                  <Form>\n                    <Card sectioned>\n                      <FormLayout>\n                        <FormLayout.Group>\n                          <TextField\n                            prefix='$'\n                            value={price}\n                            disabled={true}\n                            label='Original price'\n                            type='price'\n                          />\n                          <TextField\n                            prefix='$'\n                            value={discount}\n                            onChange={this.handleChange('discount')}\n                            label='Discounted price'\n                            type='discount'\n                          />\n                        </FormLayout.Group>\n                        <p>This sale price will expire in two weeks</p>\n                      </FormLayout>\n                    </Card>\n                    <PageActions\n                      primaryAction={[\n                        {\n                          content: 'Save',\n                          onAction: () => {\n                            const productVariableInput = {\n                              id: variantId,\n                              price: discount\n                            };\n                            handleSubmit({\n                              variables: { input: productVariableInput }\n                            });\n                          }\n                        }\n                      ]}\n                      secondaryActions={[\n                        {\n                          content: 'Remove discount'\n                        }\n                      ]}\n                    />\n                  </Form>\n                </Layout.Section>\n              </Layout>\n            </Page>\n          );\n        }}\n      </Mutation>\n    );\n  }\n\n  handleChange = field => {\n    return value => this.setState({ [field]: value });\n  };\n\n  itemToBeConsumed = () => {\n    const item = store.get('item');\n    const price = item.variants.edges[0].node.price;\n    const variantId = item.variants.edges[0].node.id;\n    const discounter = price * 0.1;\n    this.setState({ price, variantId });\n    return (price - discounter).toFixed(2);\n  };\n}\n\nexport default EditProduct;\n\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}