{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n\nclass ResourceListWithProducts extends React.Component {\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    return __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get('ids')\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message);\n      console.log(data);\n      return __jsx(Card, null, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: 'Product',\n          plural: 'Products'\n        },\n        items: data.nodes,\n        renderItem: item => {\n          const media = __jsx(Thumbnail, {\n            source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n            alt: item.images.edges[0] ? item.images.edges[0].node.altText : ''\n          });\n\n          const price = item.variants.edges[0].node.price;\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: `View details for ${item.title}`,\n            onClick: () => {\n              store.set('item', item);\n              redirectToProduct();\n            }\n          }, __jsx(Stack, null, __jsx(Stack.Item, {\n            fill: true\n          }, __jsx(\"h3\", null, __jsx(TextStyle, {\n            variation: \"strong\"\n          }, item.title))), __jsx(Stack.Item, null, __jsx(\"p\", null, \"$\", price)), __jsx(Stack.Item, null, __jsx(\"p\", null, \"Expires on \", twoWeeksFromNow, \" \"))));\n        }\n      }));\n    });\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/richardmcsharry/code/shopify-demo/components/ResourceList.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","Thumbnail","store","Redirect","Context","ResourceListWithProducts","React","Component","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","now","toDateString","GET_PRODUCTS_BY_ID","ids","get","data","loading","error","message","console","log","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","id","title","set"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport {\n  Card,\n  ResourceList,\n  Stack,\n  TextStyle,\n  Thumbnail\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n\nclass ResourceListWithProducts extends React.Component {\n  static contextType = Context;\n  render() {\n    const app = this.context;\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(\n        Redirect.Action.APP,\n        '/edit-products',\n      );\n    };\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n\n    return (\n      <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\n        {({ data, loading, error }) => {\n          if (loading) return <div>Loadingâ€¦</div>;\n          if (error) return <div>{error.message}</div>;\n          console.log(data);\n          return (\n            <Card>\n              <ResourceList\n                showHeader\n                resourceName={{ singular: 'Product', plural: 'Products' }}\n                items={data.nodes}\n                renderItem={item => {\n                  const media = (\n                    <Thumbnail\n                      source={\n                        item.images.edges[0]\n                          ? item.images.edges[0].node.originalSrc\n                          : ''\n                      }\n                      alt={\n                        item.images.edges[0]\n                          ? item.images.edges[0].node.altText\n                          : ''\n                      }\n                    />\n                  );\n                  const price = item.variants.edges[0].node.price;\n                  return (\n                    <ResourceList.Item\n                      id={item.id}\n                      media={media}\n                      accessibilityLabel={`View details for ${item.title}`}\n                      onClick={() => {\n                        store.set('item', item);\n                        redirectToProduct();\n                      }}\n                    >\n                      <Stack>\n                        <Stack.Item fill>\n                          <h3>\n                            <TextStyle variation=\"strong\">\n                              {item.title}\n                            </TextStyle>\n                          </h3>\n                        </Stack.Item>\n                        <Stack.Item>\n                          <p>${price}</p>\n                        </Stack.Item>\n                        <Stack.Item>\n                          <p>Expires on {twoWeeksFromNow} </p>\n                        </Stack.Item>\n                      </Stack>\n                    </ResourceList.Item>\n                  );\n                }}\n              />\n            </Card>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default ResourceListWithProducts;\n \nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;"]},"metadata":{},"sourceType":"module"}