{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, DisplayText, Form, FormLayout, Layout, Page, PageActions, TextField } from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      discount: '',\n      price: '',\n      variantId: ''\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {\n      const item = store.get('item');\n      const price = item.variants.edges[0].node.price;\n      const variantId = item.variants.edges[0].node.id;\n      const discounter = price * 0.1;\n      this.setState({\n        price,\n        variantId\n      });\n      return (price - discounter).toFixed(2);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n    return __jsx(Mutation, {\n      mutation: UPDATE_PRICE\n    }, (handleSubmit, {\n      error,\n      data\n    }) => {\n      return __jsx(Page, null, __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(DisplayText, {\n        size: \"large\"\n      }, name), __jsx(Form, null, __jsx(Card, {\n        sectioned: true\n      }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        prefix: \"$\",\n        value: price,\n        disabled: true,\n        label: \"Original price\",\n        type: \"price\"\n      }), __jsx(TextField, {\n        prefix: \"$\",\n        value: discount,\n        onChange: this.handleChange('discount'),\n        label: \"Discounted price\",\n        type: \"discount\"\n      })), __jsx(\"p\", null, \"This sale price will expire in two weeks\"))), __jsx(PageActions, {\n        primaryAction: [{\n          content: 'Save',\n          onAction: () => {\n            console.log('submitted');\n          }\n        }],\n        secondaryActions: [{\n          content: 'Remove discount'\n        }]\n      })))));\n    });\n  }\n\n}\n\nexport default EditProduct;\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/richardmcsharry/code/shopify-demo/pages/edit-product.js"],"names":["Card","DisplayText","Form","FormLayout","Layout","Page","PageActions","TextField","store","gql","Mutation","EditProduct","React","Component","discount","price","variantId","field","value","setState","item","get","variants","edges","node","id","discounter","toFixed","componentDidMount","itemToBeConsumed","render","name","state","UPDATE_PRICE","handleSubmit","error","data","handleChange","content","onAction","console","log"],"mappings":"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","sourcesContent":["\nimport {\n  Card,\n  DisplayText,\n  Form,\n  FormLayout,\n  Layout,\n  Page,\n  PageActions,\n  TextField\n} from '@shopify/polaris';\nimport store from 'store-js';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nclass EditProduct extends React.Component {\n  state = {\n    discount: '',\n    price: '',\n    variantId: ''\n  };\n\n  componentDidMount() {\n    this.setState({ discount: this.itemToBeConsumed() });\n  }\n\n  render() {\n    const { name, price, discount, variantId } = this.state;\n    return (\n      <Mutation\n        mutation={UPDATE_PRICE}\n      >\n        {(handleSubmit, { error, data }) => {\n          \n        return (\n          <Page>\n            <Layout>\n              <Layout.Section>\n                <DisplayText size=\"large\">{name}</DisplayText>\n                <Form>\n                  <Card sectioned>\n                    <FormLayout>\n                      <FormLayout.Group>\n                        <TextField\n                          prefix=\"$\"\n                          value={price}\n                          disabled={true}\n                          label=\"Original price\"\n                          type=\"price\"\n                        />\n                        <TextField\n                          prefix=\"$\"\n                          value={discount}\n                          onChange={this.handleChange('discount')}\n                          label=\"Discounted price\"\n                          type=\"discount\"\n                        />\n                      </FormLayout.Group>\n                      <p>\n                        This sale price will expire in two weeks\n                      </p>\n                    </FormLayout>\n                  </Card>\n                  <PageActions\n                    primaryAction={[\n                      {\n                        content: 'Save',\n                        onAction: () => {\n                          console.log('submitted');\n                        }\n                      }\n                    ]}\n                    secondaryActions={[\n                      {\n                        content: 'Remove discount'\n                      }\n                    ]}\n                  />\n                </Form>\n              </Layout.Section>\n            </Layout>\n          </Page>\n        );\n      }}\n      </Mutation>\n    );\n  }\n\n  handleChange = (field) => {\n    return (value) => this.setState({ [field]: value });\n  };\n\n  itemToBeConsumed = () => {\n    const item = store.get('item');\n    const price = item.variants.edges[0].node.price;\n    const variantId = item.variants.edges[0].node.id;\n    const discounter = price * 0.1;\n    this.setState({ price, variantId });\n    return (price - discounter).toFixed(2);\n  };\n}\n\nexport default EditProduct;\n\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;"]},"metadata":{},"sourceType":"module"}