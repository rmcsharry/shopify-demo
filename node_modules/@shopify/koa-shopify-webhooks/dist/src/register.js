"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var network_1 = require("@shopify/network");
var types_1 = require("./types");
var ApiVersion;
(function (ApiVersion) {
    ApiVersion["April19"] = "2019-04";
    ApiVersion["July19"] = "2019-07";
    ApiVersion["October19"] = "2019-10";
    ApiVersion["January20"] = "2020-01";
    ApiVersion["April20"] = "2020-04";
    ApiVersion["Unstable"] = "unstable";
    ApiVersion["Unversioned"] = "unversioned";
})(ApiVersion = exports.ApiVersion || (exports.ApiVersion = {}));
function registerWebhook(_a) {
    var address = _a.address, topic = _a.topic, accessToken = _a.accessToken, shop = _a.shop, apiVersion = _a.apiVersion;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response, result;
        var _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, fetch("https://" + shop + "/admin/api/" + apiVersion + "/graphql.json", {
                        method: network_1.Method.Post,
                        body: buildQuery(topic, address),
                        headers: (_b = {},
                            _b[types_1.WebhookHeader.AccessToken] = accessToken,
                            _b[network_1.Header.ContentType] = 'application/graphql',
                            _b),
                    })];
                case 1:
                    response = _c.sent();
                    return [4 /*yield*/, response.json()];
                case 2:
                    result = _c.sent();
                    if (result.data &&
                        result.data.webhookSubscriptionCreate &&
                        result.data.webhookSubscriptionCreate.webhookSubscription) {
                        return [2 /*return*/, { success: true, result: result }];
                    }
                    else {
                        return [2 /*return*/, { success: false, result: result }];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.registerWebhook = registerWebhook;
function buildQuery(topic, callbackUrl) {
    return "\n    mutation webhookSubscriptionCreate {\n      webhookSubscriptionCreate(topic: " + topic + ", webhookSubscription: {callbackUrl: \"" + callbackUrl + "\"}) {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n        }\n      }\n    }\n  ";
}
